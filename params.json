{
  "name": "Violation-comments-to-GitHub-gradle-plugin",
  "tagline": "A plugin for Gradle that will find report files from static code analysis and comment pull requests in GItHub with them.",
  "body": "# Violation Comments to GitHub Gradle Plugin [![Build Status](https://travis-ci.org/tomasbjerre/violation-comments-to-github-gradle-plugin.svg?branch=master)](https://travis-ci.org/tomasbjerre/violation-comments-to-github-gradle-plugin) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/se.bjurr.violations/violation-comments-to-github-gradle-plugin/badge.svg)](https://maven-badges.herokuapp.com/maven-central/se.bjurr.violations/violation-comments-to-github-gradle-plugin)\r\n\r\nThis is a Gradle plugin for [Violation Comments to GitHub Lib](https://github.com/tomasbjerre/violation-comments-to-github-lib).\r\n\r\nIt can be used in Travis, or any other build server, to read results from static code analysis and comment pull requests in GitHub with them.\r\n\r\nYou can have a look at [violations-test](https://github.com/tomasbjerre/violations-test/pull/2) to see what the result may look like.\r\n\r\nIt supports:\r\n * [_AndoidLint_](http://developer.android.com/tools/help/lint.html)\r\n * [_Checkstyle_](http://checkstyle.sourceforge.net/) ([_ESLint_](https://github.com/sindresorhus/grunt-eslint) with `format: 'checkstyle'`)\r\n * [_CodeNarc_](http://codenarc.sourceforge.net/)\r\n * [_CPD_](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)\r\n * [_CPPLint_](https://github.com/theandrewdavis/cpplint)\r\n * [_CPPCheck_](http://cppcheck.sourceforge.net/)\r\n * [_CSSLint_](https://github.com/CSSLint/csslint)\r\n * [_Findbugs_](http://findbugs.sourceforge.net/)\r\n * [_Flake8_](http://flake8.readthedocs.org/en/latest/) ([_Pep8_](https://github.com/PyCQA/pycodestyle), [_Mccabe_](https://pypi.python.org/pypi/mccabe), [_PyFlakes_](https://pypi.python.org/pypi/pyflakes))\r\n * [_FxCop_](https://en.wikipedia.org/wiki/FxCop)\r\n * [_Gendarme_](http://www.mono-project.com/docs/tools+libraries/tools/gendarme/)\r\n * [_JSHint_](http://jshint.com/)\r\n * _Lint_ A common XML format, used by different linters.\r\n * [_JCReport_](https://github.com/jCoderZ/fawkez/wiki/JcReport)\r\n * [_PerlCritic_](https://github.com/Perl-Critic)\r\n * [_PiTest_](http://pitest.org/)\r\n * [_PyLint_](https://www.pylint.org/)\r\n * [_PMD_](https://pmd.github.io/)\r\n * [_ReSharper_](https://www.jetbrains.com/resharper/)\r\n * [_Simian_](http://www.harukizaemon.com/simian/)\r\n * [_StyleCop_](https://stylecop.codeplex.com/)\r\n * [_XMLLint_](http://xmlsoft.org/xmllint.html)\r\n * [_ZPTLint_](https://pypi.python.org/pypi/zptlint)\r\n \r\n## Usage ##\r\nThere is a running example [here](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin/tree/master/violation-comments-to-github-gradle-plugin-example).\r\n\r\nHere is and example: \r\n\r\n```\r\n  buildscript {\r\n    repositories {\r\n      maven {\r\n        url \"https://plugins.gradle.org/m2/\"\r\n      }\r\n    }\r\n    dependencies {\r\n      classpath \"se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.18\"\r\n    }\r\n  }\r\n\r\n  apply plugin: \"se.bjurr.violations.violation-comments-to-github-gradle-plugin\"\r\n\r\n  task violationCommentsToGitHub(type: se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {\r\n   repositoryOwner = \"tomasbjerre\";\r\n   repositoryName = \"violations-test\"\r\n   pullRequestId = System.properties['GITHUB_PULLREQUESTID']\r\n   username = System.properties['GITHUB_USERNAME']\r\n   password = System.properties['GITHUB_PASSWORD']\r\n   oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']\r\n   gitHubUrl = \"https://api.github.com/\"\r\n   createCommentWithAllSingleFileComments = false\r\n   createSingleFileComments = true\r\n   commentOnlyChangedContent = true\r\n   violations = [\r\n    [\"FINDBUGS\",   \".\", \".*/findbugs/.*\\\\.xml\\$\"],\r\n    [\"PMD\",        \".\", \".*/pmd/.*\\\\.xml\\$\"],\r\n    [\"CHECKSTYLE\", \".\", \".*/checkstyle/.*\\\\.xml\\$\"],\r\n    [\"JSHINT\",     \".\", \".*/jshint/.*\\\\.xml\\$\"],\r\n    [\"CSSLINT\",    \".\", \".*/csslint/.*\\\\.xml\\$\"]\r\n   ]\r\n  }\r\n```\r\n\r\nTo send violations, just run:\r\n```\r\n./gradlew violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$GITHUB_PULL_REQUEST -DGITHUB_USERNAME=... -DGITHUB_PASSWORD=...\r\n```\r\n\r\nOr if you want to use OAuth2:\r\n```\r\n./gradlew violationCommentsToGitHub -DGITHUB_PULLREQUESTID=$TRAVIS_PULL_REQUEST -DGITHUB_OAUTH2TOKEN=$GITHUB_OAUTH2TOKEN\r\n```\r\n\r\nYou may also have a look at [Violations Lib](https://github.com/tomasbjerre/violations-lib).\r\n\r\n## Developer instructions\r\n\r\nTo build the code you need to run `build.sh` in root of repo. You may also have a look at `.travis.yml`.\r\n\r\nTo do a release you need to do `./gradlew release -Dgradle.publish.key=... -Dgradle.publish.secret=...` and release the artifact from [staging](https://oss.sonatype.org/#stagingRepositories). More information [here](http://central.sonatype.org/pages/releasing-the-deployment.html).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}